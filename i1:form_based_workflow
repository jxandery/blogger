===== I1: Form-based Workflow =====

1. Creating the NEW Action and View (so that articles can be created outside the console)

** Previously, we setup the resources :article route in routes.rb, and that told Rails that we were going to follow the RESTful conventions for this
   model named Article.

  - app/controllers/articles_controller.rb

    def new
    end

  - app/views/articles/new.html.erb

    <h1>Create a New Article</h1>

2. Writing a Form
  - app/views/articles/new.html.erb

    <%= form_for(@article) do |f| %>       # form_for is a Rails helper method which takes one parameter, in this case @article and a block with the form fields. The first line basically
      <ul>                                 # says, "Create a form for the object named @article, refer to the form by the name f and add the following element to the form.."
      <% @article.errors.full_messages.each do |error| %>
        <li><%= error %></li>
      <% end %>
      </ul>
      <p>
        <%= f.label :title %><br />        # f.label helper creates an HTML label for a field. This is good usability practice and will have some other benfits for us later
        <%= f.text_field :title %>         # f.text_field helper creates a single-line text box named title
      </p>
      <p>
        <%= f.label :body %><br />
        <%= f.text_field :body %>
      </p>
      <p>
        <%= f.submit :body %>              # f.submit helper creates a button labeled "Create"
      </p>
    <% end %>

  # We didn't explicity call the method model_name, but since we're passing @article to form_for, form_for is calling model_name.
  # Since, @article is nil, model_name being called on nil generates the error
  # Reflection: Used by Rails. Add the line below so that Rails can go into Article to see what fields it has

  - articles_controller.rb

    def new
      @article = Article.new
    end

3. Create Action
** New vs Create: the new action loads the form. but in Rails create action processes the data from the form

  - articles_controller.rb

    def create
      fail                    # the fail method allows you to halt the request and examine the request parameters
    end

  # The page will say RuntimeError

    utf                   : this meaningless checkmark is a hack to for Internet Explorer to submit the form using UTF-8
    authenticity_token    : Rails has some built-in security mechanisms to resist "cross-site forgery". Basically, this value proves that the client fetched the form form your site before submitting the data.
    article               : points to a nested hash with the data from the form itself
      title               : the title from the form
      body                : the body from the form
    commit                : this key holds the text of the button they clicked. From the server side, clicking "Save" or "Cancel" button look exactly the same except for this parameter
    action                : which controller action is being activated for this request
    controller            : which controller action is being activated for this request

  - articles_controller.rb

    def create
      @article = Article.new
      @article.title = params[:article][:title]
      @article.body = params[:article][:body]
      @article.save
      redirect_to article_path(@article)
    end

    # another way to write this:

    def create
      @article = Article.new(parmas[:article])
      @article.save
      redirect_to article_path(@article)
    end

  # still blows up, but only because of security reasons Rails doesn't let you blindly save parameters sent via the params has.
  # Strong Parameters lets you get around this via two methods, require and permit. They're declared as helper methods, via the helper file
** interstingly if you don't try and change the create method to taking the whole hash, the article_params method in the articles_helper file isn't needed

  - app/helpers/articles_helper.rb

  Module ArticlesHelper
    def article_params
      params.require(:article).permit(:title, :body)
    end
  end

  - articles_controller.rb

    class ArticleController < ApplicationController
      include ArticlesHelper

      def article_params
        params.require(:article).permit(:title, :body)
      end

    end

4. Delete Articles
  - show.html.erb

    <%= link_to "delete", article_path(@article) %>

  # if you click on the on the delete link and reload the browser, you'll see it hasn't been deleted.
  # the problem is that HMTL forms only support GET and POST requests. The server window confirms this
  # as it only shows a GET request. Rail's solution to this problem is to fake a DELETE.

    <%= link_to "delete", article_path(@article), method: :delete %>

  # Another problem: the HTTP verb is DELETE, but the Rails method is destroy
  # Define the destory method

  - article_controller.rb

    def destroy
      @article = Articles.find(params[:id]).destroy
      redirect_to article_path(@article)
    end
** the above needs to redirect to the articles index page, i don't think that's it in ln 127. what should it be?

  - show.html.erb

    data: {confirm: "Really delete the article?"}   # this will pop up ap javascript dialog when the link is clicked. Cancel to stop request, OK to delete

5. Creating an Edit Action & View
  - show.html.erb

    <%= link_to "edit", edit_article_path(@article) %>

  - articles_controller.rb

    def edit
      @article = Article.find(parmas[:id])
    end

6. Creating a Form Partial
  - app/views/articles/_form.html.erb       # partials always start with an underscore

  # cut and paste everything from the h1 tags on down into _form.html.erb

    <%= render partial: 'form' %>           # this line goes into every file that will repeat what's in the form partial

** Implementing Update:
** The router is looking for an action named update. Just like the new action sends its form data to the create action, the edit action sends its form data to the update action. In fact, within our articles_controller.rb the update method will look very similar to create:

  - articles_controllers.rb

    def update
      @article = Article.find(params[:id])
      @article.update(article_params)
      redirect_to article_path(@article)
    end


**The only new bit here is the update method. It's very similar to Article.new where youc an pass in the hash of form data. It changes the values in the object to match the values submitted
  with the form. One difference from new is that update automatically saves the changes

7. Adding a Flash
  - articles_controllers.rb

    def update
      @article = Article.find(params[:id])
      @article.update(article_params)

      flash.notice = "Article '#{@article.title}' Updated!"

      redirect_to article_path(@article)
    end

    # since the flash will be used in many applications, it's better to add it tot he layout
    # A layout is used to wrap multiple view templates in your application.
    # You can create layouts specific to each controller, but most often we'll just use one layout that wraps every view template in the application

  - app/views/layouts/application.html.erb

    <!DOCTYPE html>
    <html>
    <head>
      <title>BLogger</title>
      <%= stylesheet_link_tag "application", media: "all", "data-turbolinks-track" => true %>
      <%= javascript_include_tag "application", "data-turbolinks-track" => true %>
      <%= csrf_meta_tags %>
    </head>
    <body>
    <p class="flash"><%= flash.notice %></p>
    <%= yield %>      # yield is where the view template content will be injected.

    </body>
    </html>

** This can'be the way that testing is done for flash. It's not really testing.
    # flash testing: try changing your article, clicking save and you should see the flash message appear at the top of the show page
    # typical controllers will set flash messages in the update, create, and destroy actions.
** the flash message won't work for destroy action because it won't be able to refer back to an id that is already deleted. How do I remedy this?

8. Making the root show our articles index page
  # it's annoying to have to go to http://localhost:3000/ and see the Rails starter page

  - config/routes.rb

    root to: 'articles#index'       # above the resources :articles add this line
